{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Swastik R\\\\Downloads\\\\Software_engineering_project-Development\\\\Software_engineering_project-Development\\\\src\\\\views\\\\threed.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeDModelViewer = ({\n  modelUrl\n}) => {\n  _s();\n  const containerRef = useRef(null); // Ref for the container\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\n    renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight);\n    renderer.setClearColor(0x000000);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    containerRef.current.appendChild(renderer.domElement);\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(45, containerRef.current.clientWidth / containerRef.current.clientHeight, 1, 1000);\n    camera.position.set(0, 10, 20);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05; // Smoother damping\n    controls.enablePan = true; // Enable panning\n    controls.enableZoom = true;\n    controls.zoomSpeed = 1.0;\n    controls.rotateSpeed = 0.8; // Adjusted for smoother rotation\n    controls.panSpeed = 0.8; // Adjusted pan speed\n    controls.minDistance = 5;\n    controls.maxDistance = 50;\n    controls.minPolarAngle = 0; // Allow full vertical rotation\n    controls.maxPolarAngle = Math.PI; // Allow full vertical rotation\n    controls.autoRotate = false;\n    controls.target.set(0, 0, 0);\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const loader = new GLTFLoader();\n    loader.load(modelUrl, gltf => {\n      const mesh = gltf.scene;\n      scene.add(mesh);\n      const box = new THREE.Box3().setFromObject(mesh);\n      const center = box.getCenter(new THREE.Vector3());\n      mesh.position.sub(center);\n      controls.target.copy(center);\n      controls.update();\n    }, undefined, error => {\n      console.error(error);\n    });\n    const handleResize = () => {\n      renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight);\n      camera.aspect = containerRef.current.clientWidth / containerRef.current.clientHeight;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener('resize', handleResize);\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      renderer.dispose();\n    };\n  }, [modelUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"model-model\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 12\n  }, this);\n};\n_s(ThreeDModelViewer, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = ThreeDModelViewer;\nexport default ThreeDModelViewer;\nvar _c;\n$RefreshReg$(_c, \"ThreeDModelViewer\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","GLTFLoader","OrbitControls","jsxDEV","_jsxDEV","ThreeDModelViewer","modelUrl","_s","containerRef","current","renderer","WebGLRenderer","antialias","outputColorSpace","SRGBColorSpace","setSize","clientWidth","clientHeight","setClearColor","setPixelRatio","window","devicePixelRatio","shadowMap","enabled","type","PCFSoftShadowMap","appendChild","domElement","scene","Scene","camera","PerspectiveCamera","position","set","controls","enableDamping","dampingFactor","enablePan","enableZoom","zoomSpeed","rotateSpeed","panSpeed","minDistance","maxDistance","minPolarAngle","maxPolarAngle","Math","PI","autoRotate","target","ambientLight","AmbientLight","add","loader","load","gltf","mesh","box","Box3","setFromObject","center","getCenter","Vector3","sub","copy","update","undefined","error","console","handleResize","aspect","updateProjectionMatrix","addEventListener","animate","requestAnimationFrame","render","removeEventListener","dispose","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Swastik R/Downloads/Software_engineering_project-Development/Software_engineering_project-Development/src/views/threed.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nconst ThreeDModelViewer = ({ modelUrl }) => {\n    const containerRef = useRef(null); // Ref for the container\n\n    useEffect(() => {\n        if (!containerRef.current) return;\n\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\n        renderer.outputColorSpace = THREE.SRGBColorSpace;\n        renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight);\n        renderer.setClearColor(0x000000);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        containerRef.current.appendChild(renderer.domElement);\n\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(\n            45,\n            containerRef.current.clientWidth / containerRef.current.clientHeight,\n            1,\n            1000\n        );\n        camera.position.set(0, 10, 20);\n\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.enableDamping = true;\ncontrols.dampingFactor = 0.05; // Smoother damping\ncontrols.enablePan = true; // Enable panning\ncontrols.enableZoom = true;\ncontrols.zoomSpeed = 1.0;\ncontrols.rotateSpeed = 0.8; // Adjusted for smoother rotation\ncontrols.panSpeed = 0.8; // Adjusted pan speed\ncontrols.minDistance = 5;\ncontrols.maxDistance = 50;\ncontrols.minPolarAngle = 0; // Allow full vertical rotation\ncontrols.maxPolarAngle = Math.PI; // Allow full vertical rotation\ncontrols.autoRotate = false;\ncontrols.target.set(0, 0, 0);\n\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n        scene.add(ambientLight);\n\n        const loader = new GLTFLoader();\n        loader.load(\n            modelUrl,\n            (gltf) => {\n                const mesh = gltf.scene;\n                scene.add(mesh);\n                const box = new THREE.Box3().setFromObject(mesh);\n                const center = box.getCenter(new THREE.Vector3());\n                mesh.position.sub(center);\n                controls.target.copy(center);\n                controls.update();\n            },\n            undefined,\n            (error) => {\n                console.error(error);\n            }\n        );\n\n        const handleResize = () => {\n            renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight);\n            camera.aspect = containerRef.current.clientWidth / containerRef.current.clientHeight;\n            camera.updateProjectionMatrix();\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        const animate = () => {\n            requestAnimationFrame(animate);\n            controls.update();\n            renderer.render(scene, camera);\n        };\n\n        animate();\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            renderer.dispose();\n        };\n    }, [modelUrl]);\n\n    return <div ref={containerRef} className=\"model-model\" />;\n};\n\nexport default ThreeDModelViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}